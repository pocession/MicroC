wanted <- paste0("chr", seq(1:23))
wanted <- c(wanted, "chrX", "chrY")
df <- df |>
dplyr::filter(chr %in% wanted) |>
dplyr::mutate(start = as.numeric(start),
end = as.numeric(end))
df <- df |>
dplyr::mutate(id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start) |>
dplyr::mutate(end = ifelse(start_end_distance == 0, end+1, end))
df <- input_df
df <- df |>
dplyr::filter(chr %in% wanted) |>
dplyr::mutate(start = as.numeric(start),
end = as.numeric(end))
df <- df |>
dplyr::mutate(id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start) |>
dplyr::mutate(end = ifelse(start_end_distance == 0, end+1, end))
gr <- GRanges(
seqnames = df$chr,
ranges = IRanges(start = df$start, end = df$end)
)
View(df)
df <- input_df
df <- df |>
dplyr::filter(chr %in% wanted) |>
dplyr::mutate(start = as.numeric(start),
end = as.numeric(end))
df <- df |>
dplyr::mutate(id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start) |>
dplyr::mutate(end = ifelse(start_end_distance == 0, end+2, end))
# Create GRange objects-------------------------------------------------------
gr <- GRanges(
seqnames = df$chr,
ranges = IRanges(start = df$start, end = df$end)
)
df <- df[3:10,]
gr <- GRanges(
seqnames = df$chr,
ranges = IRanges(start = df$start, end = df$end)
)
df <- input_Df
input_df
df <- input_df
df <- df[1:10,]
gr <- GRanges(
seqnames = df$chr,
ranges = IRanges(start = df$start, end = df$end)
)
df <- input_df
gr <- GRanges(
seqnames = df$chr,
ranges = IRanges(start = df$start, end = df$end)
)
df <- df[1:10,]
gr <- GRanges(
seqnames = df$chr,
ranges = IRanges(start = df$start, end = df$end)
)
View(df)
View(gr)
df <- input_df
gr <- GRanges(
seqnames = df$chr,
ranges = IRanges(start = df$start, end = df$end)
)
df <- df |>
dplyr::mutate(id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start) |>
dplyr::mutate(end = ifelse(start_end_distance == 0, end+2, end))
gr <- GRanges(
seqnames = df$chr,
ranges = IRanges(start = df$start, end = df$end)
)
df <- input_df
wanted <- paste0("chr", seq(1:23))
wanted <- c(wanted, "chrX", "chrY")
df <- df |>
dplyr::filter(chr %in% wanted) |>
dplyr::mutate(start = as.numeric(start),
end = as.numeric(end))
df_subset <- df |>
dplyr::mutate(id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start) |>
dplyr::filter(start_end_distance > 0)
gr <- GRanges(
seqnames = df_subset$chr,
ranges = IRanges(start = df_subset$start, end = df_subset$end),
id = df_subset$id
)
View(gr)
features <- transcripts(TxDb)
TxDb <- TxDb.Mmusculus.UCSC.mm10.knownGene
features <- transcripts(TxDb)
ps.idx <- follow(gr, features)
## nearest from peak end
pe.idx <- precede(gr, features)
## check if any peak not matched to the nearest gene
na.idx <- is.na(ps.idx) & is.na(pe.idx)
## Remove na
if (sum(na.idx) > 0) { ## suggested by Thomas Schwarzl
ps.idx <- ps.idx[!na.idx]
pe.idx <- pe.idx[!na.idx]
gr <- gr[!na.idx]
}
features_df <- data.frame(txStart = start(features[ps.idx]),
txEnd = end(features[pe.idx]),
txStrand = strand(features[ps.idx]),
tx_id = features[ps.idx]$tx_id,
tx_name = features[ps.idx]$tx_name)
View(features_df)
features_df <- features_df |>
dplyr::mutate(distanceToTSS = ifelse(txStrand == "+", txEnd - txStart, txStart - txEnd))
View(features_df)
gr_df <- as.data.frame(gr)
View(gr_df)
View(gr_df)
View(gr_df)
View(features_df)
annotated_df <- cbind(gr_df, features_df)
View(annotated_df)
View(df_subset)
df <- input_df
df_reversed <- df |>
dplyr::mutate(ix_id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start) |>
dplyr::filter(start_end_distance > 0)
remove(df_subset)
View(df_reversed)
df_reversed <- df |>
dplyr::mutate(ix_id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start)
df_reversed <- df |>
dplyr::mutate(ix_id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start) |>
dplyr::mutate(start = ifelse(start_end_distance > 0, start, end),
end = ifelse(start_end_distance < 0, end, start))
df_reversed <- df |>
dplyr::mutate(ix_id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start) |>
dplyr::mutate(start_reversed = ifelse(start_end_distance > 0, start, end),
end_reversed = ifelse(start_end_distance < 0, end, start))
df <- input_df
wanted <- paste0("chr", seq(1:23))
wanted <- c(wanted, "chrX", "chrY")
df <- df |>
dplyr::filter(chr %in% wanted) |>
dplyr::mutate(start = as.numeric(start),
end = as.numeric(end))
df_reversed <- df |>
dplyr::mutate(ix_id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start) |>
dplyr::mutate(start_reversed = ifelse(start_end_distance >= 0, start, end),
end_reversed = ifelse(start_end_distance < 0, end, start))
df_reversed <- df |>
dplyr::mutate(ix_id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start) |>
dplyr::mutate(start_reversed = ifelse(start_end_distance >= 0, start, end),
end_reversed = ifelse(start_end_distance < 0, start, end))
df_reversed <- df |>
dplyr::mutate(ix_id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start) |>
dplyr::mutate(start_reversed = ifelse(start_end_distance >= 0, start, end),
end_reversed = ifelse(start_end_distance < 0, start, end)) |>
dplyr::select(chr, start_reversed, end_reversed, id_ix)
df_reversed <- df |>
dplyr::mutate(ix_id = paste0(chr, "_", start, "_", end),
start_end_distance = end - start) |>
dplyr::mutate(start_reversed = ifelse(start_end_distance >= 0, start, end),
end_reversed = ifelse(start_end_distance < 0, start, end)) |>
dplyr::select(chr, start_reversed, end_reversed, ix_id)
gr <- GRanges(
seqnames = df_reversed$chr,
ranges = IRanges(start = df_reversed$start_reversed, end = df_reversed$end_reversed),
ix_id = df_reversed$ix_id
)
# Finding overlap ------------------------------------------------------------
features <- transcripts(TxDb)
# Select the id of closet genes ----------------------------------------------
## nearest from peak start
ps.idx <- follow(gr, features)
## nearest from peak end
pe.idx <- precede(gr, features)
## check if any peak not matched to the nearest gene
na.idx <- is.na(ps.idx) & is.na(pe.idx)
## Remove na
if (sum(na.idx) > 0) { ## suggested by Thomas Schwarzl
ps.idx <- ps.idx[!na.idx]
pe.idx <- pe.idx[!na.idx]
gr <- gr[!na.idx]
}
# Generate the final data frame ----------------------------------------------
## Identify the closet gene information
features_df <- data.frame(txStart = start(features[ps.idx]),
txEnd = end(features[pe.idx]),
txStrand = strand(features[ps.idx]),
tx_id = features[ps.idx]$tx_id,
tx_name = features[ps.idx]$tx_name)
features_df <- features_df |>
dplyr::mutate(distanceToTSS = ifelse(txStrand == "+", txEnd - txStart, txStart - txEnd))
gr_df <- as.data.frame(gr)
View(gr_df)
View(features_df)
annotated_df <- cbind(gr_df, features_df)
View(annotated_df)
annotated_df <- annotated_df[,6:ncol(annotated_df)]
View(annotated_df)
View(df_reversed)
final_df <- df_reversed |>
dplyr::left_join(annotated_df, by = "ix_id")
View(final_df)
View(df_reversed)
View(df)
View(df_reversed)
final_df <- df_reversed |>
tidyr::separate(ix_ix, c("start", "end"), remove = FALSE)
final_df <- df_reversed |>
tidyr::separate(ix_id, c("start", "end"), remove = FALSE)
View(final_df)
final_df <- df_reversed |>
tidyr::separate(ix_id, c("chr", "start", "end"), remove = FALSE)
View(final_df)
final_df <- df_reversed |>
tidyr::separate(ix_id, c("chr", "start", "end"), remove = FALSE) |>
dplyr::select(chr, start, end, ix_id) |>
dplyr::left_join(annotated_df, by = "ix_id")
final_df <- df_reversed |>
tidyr::separate(ix_id, c("chr", "start", "end"), remove = FALSE) |>
dplyr::select(chr, start, end, ix_id)
View(final_df)
final_df <- df_reversed |>
tidyr::separate(ix_id, c("chr", "start", "end"), remove = FALSE) |>
dplyr::select(chr, start, end, ix_id) |>
dplyr::left_join(annotated_df, by = "ix_id")
final_df <- df_reversed |>
tidyr::separate(ix_id, c("chr", "start", "end"), remove = FALSE) |>
dplyr::select(chr, start, end, ix_id) |>
dplyr::left_join(annotated_df, by = "ix_id") |>
dplyr::select(-c(ix_id))
View(df)
wanted <- paste0("chr", seq(1:23))
wanted <- c(wanted, "chrX", "chrY")
df <- df |>
dplyr::filter(chr %in% wanted) |>
dplyr::mutate(start = as.numeric(start),
end = as.numeric(end)) |>
dplyr::mutate(ix_id = paste0(chr, "_", start, "_", end))
# Seperate the interaction counts into two data frame ------------------------
## As the interaction is built from i-j as well as j-i interaction
## So i-j interaction = j-i interaction
## Therefore we have to reverse the start ane end position for j-i interaction
## For creating GRange objects
## The ix_id column is used as the identity column
df_reversed <- df |>
dplyr::mutate(start_end_distance = end - start) |>
dplyr::mutate(start_reversed = ifelse(start_end_distance >= 0, start, end),
end_reversed = ifelse(start_end_distance < 0, start, end)) |>
dplyr::select(chr, start_reversed, end_reversed, ix_id)
gr <- GRanges(
seqnames = df_reversed$chr,
ranges = IRanges(start = df_reversed$start_reversed, end = df_reversed$end_reversed),
ix_id = df_reversed$ix_id
)
# Finding overlap ------------------------------------------------------------
features <- transcripts(TxDb)
# Select the id of closet genes ----------------------------------------------
## nearest from peak start
ps.idx <- follow(gr, features)
## nearest from peak end
pe.idx <- precede(gr, features)
## check if any peak not matched to the nearest gene
na.idx <- is.na(ps.idx) & is.na(pe.idx)
## Remove na
if (sum(na.idx) > 0) { ## suggested by Thomas Schwarzl
ps.idx <- ps.idx[!na.idx]
pe.idx <- pe.idx[!na.idx]
gr <- gr[!na.idx]
}
# Generate the final data frame ----------------------------------------------
## Identify the closet gene information
features_df <- data.frame(txStart = start(features[ps.idx]),
txEnd = end(features[pe.idx]),
txStrand = strand(features[ps.idx]),
tx_id = features[ps.idx]$tx_id,
tx_name = features[ps.idx]$tx_name)
features_df <- features_df |>
dplyr::mutate(distanceToTSS = ifelse(txStrand == "+", txEnd - txStart, txStart - txEnd))
gr_df <- as.data.frame(gr)
annotated_df <- cbind(gr_df, features_df)
annotated_df <- annotated_df[,6:ncol(annotated_df)]
final_df <- df_reversed |>
tidyr::separate(ix_id, c("chr", "start", "end"), remove = FALSE) |>
dplyr::select(chr, start, end, ix_id) |>
dplyr::left_join(annotated_df, by = "ix_id") |>
dplyr::select(-c(ix_id))
View(final_df)
final_df <- df_reversed |>
tidyr::separate(ix_id, c("chr", "start", "end"), remove = FALSE) |>
dplyr::select(chr, start, end, ix_id) |>
dplyr::left_join(annotated_df, by = "ix_id")
View(final_df)
View(final_df)
final_df <- df_reversed |>
tidyr::separate(ix_id, remove = FALSE) |>
dplyr::select(ix_id) |>
dplyr::left_join(annotated_df, by = "ix_id")
final_df <- df_reversed |>
dplyr::select(ix_id) |>
dplyr::left_join(annotated_df, by = "ix_id")
View(df_reversed)
View(final_df)
View(annotated_df)
annotated_reversed_df <- df_reversed |>
dplyr::select(ix_id) |>
dplyr::left_join(annotated_df, by = "ix_id")
final_df <- df |>
dplyr::left_join(annotated_reversed_df, by = "ix_id")
View(final_df)
final_df <- df |>
dplyr::left_join(annotated_reversed_df, by = "ix_id") |>
dplyr::select(-c(ix_id))
View(final_df)
.get_annotated_gr <- function(df) {
# Check colnames -------------------------------------------------------------
essential_col <- c("chr", "start", "end")
for (i in 1:length(essential_col)) {
if (!essential_col[i] %in% colnames(df)) {
message("Please make sure you have the following column: ", essential_col[i])
return (0)
}
}
remove(essential_col, i)
## Filter out non-standard chr
wanted <- paste0("chr", seq(1:23))
wanted <- c(wanted, "chrX", "chrY")
df <- df |>
dplyr::filter(chr %in% wanted) |>
dplyr::mutate(start = as.numeric(start),
end = as.numeric(end)) |>
dplyr::mutate(ix_id = paste0(chr, "_", start, "_", end))
# Seperate the interaction counts into two data frame ------------------------
## As the interaction is built from i-j as well as j-i interaction
## So i-j interaction = j-i interaction
## Therefore we have to reverse the start ane end position for j-i interaction
## For creating GRange objects
## The ix_id column is used as the identity column
df_reversed <- df |>
dplyr::mutate(start_end_distance = end - start) |>
dplyr::mutate(start_reversed = ifelse(start_end_distance >= 0, start, end),
end_reversed = ifelse(start_end_distance < 0, start, end)) |>
dplyr::select(chr, start_reversed, end_reversed, ix_id)
# Create GRange objects ------------------------------------------------------
gr <- GRanges(
seqnames = df_reversed$chr,
ranges = IRanges(start = df_reversed$start_reversed, end = df_reversed$end_reversed),
ix_id = df_reversed$ix_id
)
# Finding overlap ------------------------------------------------------------
features <- transcripts(TxDb)
# Select the id of closet genes ----------------------------------------------
## nearest from peak start
ps.idx <- follow(gr, features)
## nearest from peak end
pe.idx <- precede(gr, features)
## check if any peak not matched to the nearest gene
na.idx <- is.na(ps.idx) & is.na(pe.idx)
## Remove na
if (sum(na.idx) > 0) { ## suggested by Thomas Schwarzl
ps.idx <- ps.idx[!na.idx]
pe.idx <- pe.idx[!na.idx]
gr <- gr[!na.idx]
}
# Generate the final data frame ----------------------------------------------
## Identify the closet gene information
features_df <- data.frame(txStart = start(features[ps.idx]),
txEnd = end(features[pe.idx]),
txStrand = strand(features[ps.idx]),
tx_id = features[ps.idx]$tx_id,
tx_name = features[ps.idx]$tx_name)
features_df <- features_df |>
dplyr::mutate(distanceToTSS = ifelse(txStrand == "+", txEnd - txStart, txStart - txEnd))
gr_df <- as.data.frame(gr)
annotated_df <- cbind(gr_df, features_df)
annotated_df <- annotated_df[,6:ncol(annotated_df)]
annotated_reversed_df <- df_reversed |>
dplyr::select(ix_id) |>
dplyr::left_join(annotated_df, by = "ix_id")
final_df <- df |>
dplyr::left_join(annotated_reversed_df, by = "ix_id") |>
dplyr::select(-c(ix_id))
return(final_df)
}
annotated_df <- .getannotated_gr(input_df)
annotated_df <- .get_annotated_gr(input_df)
View(annotated_df)
output
write.csv(annotated_df, output)
source(here::here("./R/annotate.R"))
source(here::here("./R/annotateDIR.R"))
df <- annotateDIR(
input = here::here("./Results/DIR/DIR_44114_C_lps_43617_mc8contact_map_extracted.csv"),
output = NULL
)
View(final_df)
View(final_df)
mapped_genes <- select(TxDb.Mmusculus.UCSC.mm10.knownGene,
keys = final_df$tx_name,
keytype = "TXNAME",
columns = c("GENEID"))
View(mapped_genes)
## map to the gene names
gene_symbols <- select(org.Mm.eg.db,
keys = mapped_genes$GENEID,
keytype = "ENTREZID",
columns = c("SYMBOL"))
View(gene_symbols)
mapped_genes <- select(TxDb.Mmusculus.UCSC.mm10.knownGene,
keys = final_df$tx_name,
keytype = "TXNAME",
columns = c("GENEID", "ENTREZID"))
columns(TxDb)
## map to the gene ids
mapped_genes <- select(TxDb,
keys = final_df$tx_name,
keytype = "TXNAME",
columns = c("GENEID"))
mapped_genes <- select(TxDb,
keys = final_df$tx_name,
keytype = "TXNAME",
columns = c("GENEID"))
## map to the gene names
gene_symbols <- select(org.Mm.eg.db,
keys = mapped_genes$GENEID,
keytype = "ENTREZID",
columns = c("SYMBOL"))
gene_symbols <- cbind(gene_symbols, mapped_genes)
final_df <- cbind(df_final, gene_symbols)
final_df <- cbind(final_df, gene_symbols)
View(final_df)
source(here::here("./R/annotateDIR.R"))
df <- annotateDIR(
input = here::here("./Results/DIR/DIR_44114_C_lps_43617_mc8contact_map_extracted.csv"),
output = NULL
)
source(here::here("./R/annotateDIR.R"))
> df <- annotateDIR(
df <- annotateDIR(input = here::here("./Results/DIR/DIR_44114_C_lps_43617_mc8contact_map_extracted.csv"),
output = NULL)
df <- annotateDIR(input = here::here("./Results/DIR/DIR_44112_A_bg_43615_mc6contact_map_extracted.csv"),
output = NULL)
install.packages(TxDb.Hsapiens.UCSC.hg38.knownGene)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
source("./R/annotateDIR.R")
df <- annotateDIR(
input = here::here("./Results/DIR/DIR_44112_A_bg_43615_mc6contact_map_extracted.csv"),
output = NULL)
df <- annotateDIR(
input = here::here("./Results/DIR/DIR_44112_A_bg_43615_mc6contact_map_extracted.csv"),
output = NULL)
source(here::here("./R/annotateDIR.R"))
df <- annotateDIR(
input = here::here("./Results/DIR/DIR_44112_A_bg_43615_mc6contact_map_extracted.csv"),
output = NULL
)
input = here::here("./Results/DIR/DIR_44112_A_bg_43615_mc6contact_map_extracted.csv")
# Assign the hg38 objects ----------------------------------------------------
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
hgdb <- org.Hs.eg.db
# Extract TSS positions ------------------------------------------------------
tss <- transcripts(txdb, columns=c("tx_id", "gene_id"), use.names=TRUE)
tss <- resize(tss, width=1, fix='start')
tss_df <- as.data.frame(tss)
View(tss)
tss <- transcripts(txdb, columns=c("tx_id", "gene_id"), use.names=TRUE)
tss <- resize(tss, width=1, fix='start')
tss_df <- as.data.frame(tss)
tss <- transcripts(txdb, columns=c("tx_id", "gene_id"), use.names=TRUE)
tss <- resize(tss, width=1, fix='start')
View(tss)
tss_df <- as.data.frame(tss)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
hgdb <- org.Hs.eg.db
# Extract TSS positions ------------------------------------------------------
tss <- transcripts(txdb, columns=c("tx_id", "gene_id"), use.names=TRUE)
tss_df <- as.data.frame(tss)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
hgdb <- org.Hs.eg.db
tss <- transcripts(txdb, columns=c("tx_id", "gene_id"), use.names=TRUE)
View(tss)
tss <- transcripts(txdb, columns=c("tx_id", "gene_id"), use.names=TRUE)
tss <- resize(tss, width=1, fix='start')
tss_df <- as.data.frame(tss, row.names = NULL)
tss_df$transcript <- row.names(tss_df)
View(tss_df)
source(here::here("./R/annotateDIR.R"))
df <- annotateDIR(
input = here::here("./Results/DIR/DIR_44112_A_bg_43615_mc6contact_map_extracted.csv"),
output = NULL
)
df <- annotateDIR(
input = here::here("./Results/DIR/DIR_44114_C_lps_43617_mc8contact_map_extracted.csv"),
output = NULL
)
