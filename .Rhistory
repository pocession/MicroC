colnames(input_df) <- col_names
View(input_df)
df = input_df
wanted <- paste0("chr", seq(1:23))
wanted <- c(wanted, "chrX", "chrY")
df <- df |>
dplyr::filter(chr %in% wanted)
input_df <- read.csv(input)
input_df <- input_df[,2:ncol(input_df)]
input_df <- input_df |>
dplyr::mutate(id = paste0(region1, "-", region2)) |>
dplyr::mutate(strand = "+") |>
dplyr::select(id, chr, region1, region2, logFC, logCPM, PValue)
col_names <- c("id", "chr", "start", "end", "strand", "logFC", "logCPM", "PValue")
colnames(input_df) <- col_names
input_df <- read.csv(input)
input_df <- input_df[,2:ncol(input_df)]
input_df <- input_df |>
dplyr::mutate(id = paste0(region1, "-", region2)) |>
dplyr::mutate(strand = "+") |>
dplyr::select(id, chr, region1, region2, strand, logFC, logCPM, PValue)
col_names <- c("id", "chr", "start", "end", "strand", "logFC", "logCPM", "PValue")
colnames(input_df) <- col_names
View(input_df)
input_df <- read.csv(input)
input_df <- input_df[,2:ncol(input_df)]
input_df <- input_df |>
dplyr::mutate(id = paste0(region1, "-", region2)) |>
dplyr::mutate(strand = "*") |>
dplyr::select(id, chr, region1, region2, strand, logFC, logCPM, PValue)
col_names <- c("id", "chr", "start", "end", "strand", "logFC", "logCPM", "PValue")
colnames(input_df) <- col_names
df = input_df
wanted <- paste0("chr", seq(1:23))
wanted <- c(wanted, "chrX", "chrY")
df <- df |>
dplyr::filter(chr %in% wanted)
# Create GRange objects ------------------------------------------------------
## For creating GRange objects
## The id column is used as the identity column
gr <- GenomicRanges::GRanges(
seqnames = df$chr,
ranges = IRanges(start = df$start, end = df$end, strand = df$strand),
id = df$id
)
gr <- GenomicRanges::GRanges(
seqnames = df$chr,
ranges = GenomicRanges::IRanges(start = df$start, end = df$end, strand = df$strand),
id = df$id
)
gr <- GenomicRanges::GRanges(
seqnames = df$chr,
ranges = IRanges::IRanges(start = df$start, end = df$end, strand = df$strand),
id = df$id
)
annots <- c('hg38_basicgenes')
annotations <- annotatr::build_annotations(genome = 'hg38', annotations = annots)
View(annotations)
df_annotated <- annotatr::annotate_regions(
regions = gr,
annotations = annotations,
ignore.strand = TRUE,
quiet = FALSE)
View(df_annotated)
df_annotated <- data.frame(df_annotated)
View(df_annotated)
df_annotated <- df_annotated |>
dplyr::select(-c(strand))
## Add the strand information back
df_strand <- df |>
dplyr::select(id, strand)
df_annotated <- df_annotated |>
dplyr::left_join(df_strand, by = "id")
View(df_annotated)
final_data <- df_annotated |>
dplyr::select(id, seqnames, start, end, strand)
df_annotated <- df_annotated |>
dplyr::select(-c(id, strand))
View(final_data)
col_names <- c("id", "chr", "start", "end", "strand")
View(final_data)
View(final_data)
col_names <- c("chr", "start", "end", "strand")
colnames(final_data) <- c("id", col_names)
View(final_data)
View(df_annotated)
final_data <- cbind(final_data, df_annotated[,5:ncol(df_annotated)])
View(input_df)
View(final_data)
#' .get_annotated_gr
#'
#' @description
#' This function annotate differentially-interacted regions (DIRs) with given genome information
#'
#' @author Tsunghan Hsieh
#'
#' @param input a character string specifying the input dataframe
#' @param col_names a character vector specifying the column names of return dataframe
#' @return a dataframe of annotated file
#' @examples
#' \dontrun{
#' df <- .get_annotated_gr(
#' df = input_df,
#' col_names = col_names
#' )
#' }
.get_annotated_gr <- function(df, col_names) {
# Check colnames -------------------------------------------------------------
## Filter out non-standard chr
wanted <- paste0("chr", seq(1:23))
wanted <- c(wanted, "chrX", "chrY")
df <- df |>
dplyr::filter(chr %in% wanted)
# Create GRange objects ------------------------------------------------------
## For creating GRange objects
## The id column is used as the identity column
gr <- GenomicRanges::GRanges(
seqnames = df$chr,
ranges = IRanges::IRanges(start = df$start, end = df$end, strand = df$strand),
id = df$id
)
# Annotate -------------------------------------------------------------------
## Select annotations for intersection with regions
## Note inclusion of custom annotation, and use of shortcuts
annots <- c('hg38_basicgenes')
## Build the annotations (a single GRanges object)
annotations <- annotatr::build_annotations(genome = 'hg38', annotations = annots)
df_annotated <- annotatr::annotate_regions(
regions = gr,
annotations = annotations,
ignore.strand = TRUE,
quiet = FALSE)
df_annotated <- data.frame(df_annotated)
df_annotated <- df_annotated |>
dplyr::select(-c(strand))
## Add the strand information back
df_strand <- df |>
dplyr::select(id, strand)
df_annotated <- df_annotated |>
dplyr::left_join(df_strand, by = "id")
# Generate the final data frame ----------------------------------------------
final_data <- df_annotated |>
dplyr::select(id, seqnames, start, end, strand)
df_annotated <- df_annotated |>
dplyr::select(-c(id, strand))
colnames(final_data) <- c("id", col_names)
final_data <- cbind(final_data, df_annotated[,5:ncol(df_annotated)])
return(final_data)
}
input_df <- read.csv(input)
input_df <- input_df[,2:ncol(input_df)]
input_df <- input_df |>
dplyr::mutate(id = paste0(region1, "-", region2)) |>
dplyr::mutate(strand = "*") |>
dplyr::select(id, chr, region1, region2, strand, logFC, logCPM, PValue)
colnames(input_df) <- c("id", "chr", "start", "end", "strand", "logFC", "logCPM", "PValue")
col_names <- c("chr", "start", "end", "strand")
annotated_df <- .get_annotated_gr(input_df, col_names)
View(annotated_df)
annotated_df <- annotated_df |>
dplyr::distinct(id)
View(annotated_df)
annotated_df <- .get_annotated_gr(input_df, col_names)
annotated_df <- annotated_df |>
dplyr::distinct(id, .keep_all = TRUE)
View(annotated_df)
View(annotated_df)
View(annotated_df)
View(input_df)
final_df <- input_df |>
dplyr::left_join(annotated_df, keep = TRUE)
final_df <- input_df |>
dplyr::left_join(annotated_df, by = "id", keep = TRUE)
View(final_data)
annotated_df <- .get_annotated_gr(input_df, col_names)
## Annotation containing multiple exons or introns are not required
annotated_df <- annotated_df |>
dplyr::distinct(id, .keep_all = TRUE)
View(annotated_df)
final_df <- input_df |>
dplyr::left_join(annotated_df, by = "id", keep = TRUE)
View(input_df)
View(annotated_df)
View(input_df)
final_df <- input_df |>
dplyr::left_join(annotated_df, by = "id")
View(final_df)
View(annotated_df)
annotated_df <- .get_annotated_gr(input_df, col_names)
## Annotation containing multiple exons or introns are not required
annotated_df <- annotated_df |>
dplyr::distinct(id, .keep_all = TRUE) |>
dplyr::select(-c(chr, start,end,strand))
View(annotated_df)
final_df <- input_df |>
dplyr::left_join(annotated_df, by = "id")
View(final_df)
# Load functions.
devtools::document()
devtools::load_all()
## Stimulation
df_bg <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/44112_A_bg_43615_mc6contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/44111_A_ctrl_43614_mc5contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bg.csv")
)
df_lps <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/44114_C_lps_43617_mc8contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/44113_C_ctrl_43616_mc7contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/lps.csv")
)
df_bcg <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/BCG_contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/DMSO_contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bcg.csv")
)
df_ldhi <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/LDHi_contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/DMSO_contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/ldhi.csv")
)
df_bcgldhi <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/BCGLDHi_contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/DMSO_contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bcgldhi.csv")
)
## DIR across different stimulation conditions
## Xiaolin exp
df_bcgldhi_bcg <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/BCGLDHi_contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/BCG_contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bcgldhi_bcg.csv")
)
df_bcgldhi_ldhi <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/BCGLDHi_contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/LDHi_contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bcgldhi_ldhi.csv")
)
df_bcg_ldhi <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/BCG_contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/LDHi_contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bcg_ldhi.csv")
)
## Me and Winsen
df_bg_lps <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/44112_A_bg_43615_mc6contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/44114_C_lps_43617_mc8contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bg_lps.csv")
)
annoted_df_list <- list()
for (treat in c("bg", "lps", "bcg", "ldhi", "bcgldhi",
"bcgldhi_bcg", "bcgldhi_ldhi", "bcg_ldhi", "bg_lps")) {
input = here::here(paste0("./Results/DIR/", treat, ".csv"))
output = here::here(paste0("./Results/DIR/annotated_", treat, ".csv"))
annoted_df_list[[treat]] <- annotateDIR(
input = input,
output = output
)
}
chr = "chr2"
treat = here::here("./Results/processing/44112_A_bg_43615_mc6contact_map_extracted.csv")
ctrl = here::here("./Results/processing/44111_A_ctrl_43614_mc5contact_map_extracted.csv")
bcv = 0.4
output = NULL
if (is.null(output)) {
# Use sub() to extract the desired part
outputfname <- sub(".*/([^.]+)\\.csv", "\\1", treat)
outputfname <- paste0("DIR_", outputfname, ".csv")
outputdir <- dirname(treat)
output <- here::here(outputdir, outputfname)
remove(outputfname, outputdir)
} else {
assertthat::assert_that(is.character(output),
msg = "The given argument is not a string.\n")
assertthat::assert_that(grepl("\\.csv$", output),
msg = "The given file to the output file is not a .csv file.\n")
assertthat::assert_that(file.exists(here::here(dirname(output))),
msg = "The given file path to the expertiment file does not exist.\n")
}
# Read and process interaction matrix  ---------------------------------------
treat_df <- .generateInteractionMatrixCount(treat)
.generateInteractionMatrixCount <- function(file) {
df <- read.csv(file)
df <- df |>
dplyr::mutate(ixid = paste0(region1, "-", region2)) |>
dplyr::mutate(self = ifelse((region2-region1 == 0), TRUE, FALSE)) |>
dplyr::filter(self != TRUE) |>
dplyr::select(ixid, region1, region2, counts)
return(df)
}
treat_df <- .generateInteractionMatrixCount(treat)
ctrl_df <- .generateInteractionMatrixCount(ctrl)
combine_df <- treat_df |>
dplyr::inner_join(ctrl_df, by = "ixid")
View(combine_df)
View(treat_df)
View(combine_df)
View(treat_df)
for (i in 1:ncol(treat_df)) {
colnames(treat_df)[i+1] <- paste0(colnames(treat_df)[i+1], "_treat")
}
i <- 1
colnames(treat_df)[i+1] <- paste0(colnames(treat_df)[i+1], "_treat")
View(treat_df)
treat_df <- .generateInteractionMatrixCount(treat)
ctrl_df <- .generateInteractionMatrixCount(ctrl)
## Change the column names
for (i in 1:ncol(treat_df)) {
colnames(treat_df)[i+1] <- paste0(colnames(treat_df)[i+1], "_treat")
}
## Change the column names
for (i in 2:ncol(treat_df)) {
colnames(treat_df)[i] <- paste0(colnames(treat_df)[i], "_treat")
}
View(treat_df)
.generateInteractionMatrixCount <- function(file, sample) {
df <- read.csv(file)
df <- df |>
dplyr::mutate(ixid = paste0(region1, "-", region2)) |>
dplyr::mutate(self = ifelse((region2-region1 == 0), TRUE, FALSE)) |>
dplyr::filter(self != TRUE) |>
dplyr::select(ixid, region1, region2, counts)
## Change the column names
for (i in 2:ncol(df)) {
colnames(df)[i] <- paste0(colnames(df)[i], "_", sample)
}
return(df)
}
treat_df <- .generateInteractionMatrixCount(treat, "treat")
ctrl_df <- .generateInteractionMatrixCount(ctrl, "ctrl")
View(treat_df)
View(ctrl_df)
combine_df <- treat_df |>
dplyr::inner_join(ctrl_df, by = "ixid")
View(combine_df)
# Filter data based on abundance
## Filter the last 5% interactions
combine_df <- combine_df |>
dplyr::mutate(avgCPM = log2(counts_treat * counts_ctrl))
View(combine_df)
# Calculate the 5th percentile (least 5% value) of the avg column
least_5_percent_value <- quantile(combine_df$avgCPM, 0.05)
combine_df <- combine_df |>
dplyr::filter(avgCPM > least_5_percent_value) |>
dplyr::select(-c(avgCPM))
counts_df <- combine_df |>
dplyr::select(counts_treat, counts_ctrl)
rownames(counts_df) <- combine_df$ixid
View(counts_df)
??edgeR::DGEList()
et <- edgeR::exactTest(dir_df, dispersion=bcv^2)
dir_df <- edgeR::DGEList(counts=counts_df, group=1:2)
et <- edgeR::exactTest(dir_df, dispersion=bcv^2)
et <- as.data.frame(et)
et$index <- rownames(et)
View(et)
View(counts_df)
dir_df <- edgeR::DGEList(counts=counts_df, group=2:1)
et <- edgeR::exactTest(dir_df, dispersion=bcv^2)
et <- as.data.frame(et)
et$index <- rownames(et)
View(et)
View(counts_df)
result <- data.frame(chr = chr, index = combine_df$ixid)
View(result)
View(et)
result <- result |>
tidyr::separate(index, c("region1", "region2"), remove = FALSE) |>
dplyr::mutate(region1 = as.numeric(region1),
region2 = as.numeric(region2)) |>
dplyr::left_join(et, by = "index") |>
dplyr::select(-c(index))
remove(et, counts_df, ctrl_df, treat_df, combine_df)
View(result)
counts_df <- combine_df |>
dplyr::select(counts_treat, counts_ctrl)
least_5_percent_value <- quantile(combine_df$avgCPM, 0.05)
treat_df <- .generateInteractionMatrixCount(treat, "treat")
ctrl_df <- .generateInteractionMatrixCount(ctrl, "ctrl")
# Combine the dataframe ------------------------------------------------------
combine_df <- treat_df |>
dplyr::inner_join(ctrl_df, by = "ixid")
# Filter data based on abundance ---------------------------------------------
## Filter the last 5% interactions
combine_df <- combine_df |>
dplyr::mutate(avgCPM = log2(counts_treat * counts_ctrl))
# Calculate the 5th percentile (least 5% value) of the avg column
least_5_percent_value <- quantile(combine_df$avgCPM, 0.05)
combine_df <- combine_df |>
dplyr::filter(avgCPM > least_5_percent_value) |>
dplyr::select(-c(avgCPM))
# Perform differential analysis ----------------------------------------------
## Generate counts df for differential analysis
counts_df <- combine_df |>
dplyr::select(counts_treat, counts_ctrl)
rownames(counts_df) <- combine_df$ixid
dir_df <- edgeR::DGEList(counts=counts_df, group=1:2)
et <- edgeR::exactTest(dir_df, dispersion=bcv^2)
et <- as.data.frame(et)
et$index <- rownames(et)
View(et)
knitr::opts_chunk$set(echo = TRUE)
# Load functions.
devtools::document()
devtools::load_all()
# Load functions.
devtools::document()
devtools::load_all()
# Load functions.
devtools::document()
devtools::load_all()
# Load functions.
devtools::document()
devtools::load_all()
# Load functions.
devtools::document()
devtools::load_all()
## Stimulation
df_bg <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/44112_A_bg_43615_mc6contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/44111_A_ctrl_43614_mc5contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bg.csv")
)
df_lps <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/44114_C_lps_43617_mc8contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/44113_C_ctrl_43616_mc7contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/lps.csv")
)
df_bcg <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/BCG_contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/DMSO_contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bcg.csv")
)
df_ldhi <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/LDHi_contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/DMSO_contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/ldhi.csv")
)
df_bcgldhi <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/BCGLDHi_contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/DMSO_contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bcgldhi.csv")
)
## DIR across different stimulation conditions
## Xiaolin exp
df_bcgldhi_bcg <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/BCGLDHi_contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/BCG_contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bcgldhi_bcg.csv")
)
df_bcgldhi_ldhi <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/BCGLDHi_contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/LDHi_contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bcgldhi_ldhi.csv")
)
df_bcg_ldhi <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/BCG_contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/LDHi_contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bcg_ldhi.csv")
)
## Me and Winsen
df_bg_lps <- GetDIRWithNoReplicate(
chr = "chr2",
treat = here::here("./Results/processing/44112_A_bg_43615_mc6contact_map_extracted.csv"),
ctrl = here::here("./Results/processing/44114_C_lps_43617_mc8contact_map_extracted.csv"),
bcv = 0.4,
output = here::here("./Results/DIR/bg_lps.csv")
)
annoted_df_list <- list()
for (treat in c("bg", "lps", "bcg", "ldhi", "bcgldhi",
"bcgldhi_bcg", "bcgldhi_ldhi", "bcg_ldhi", "bg_lps")) {
input = here::here(paste0("./Results/DIR/", treat, ".csv"))
output = here::here(paste0("./Results/DIR/annotated_", treat, ".csv"))
annoted_df_list[[treat]] <- annotateDIR(
input = input,
output = output
)
}
